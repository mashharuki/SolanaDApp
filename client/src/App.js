import React, {useEffect, useState} from "react";
import twitterLogo from './assets/twitter-logo.svg';
import './App.css';
import Idl from "./idl/myepicproject.json";
import { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';
import { Program, Provider, web3 } from '@project-serum/anchor';
import KP from "./key/keypair.json";
require('dotenv').config();

// ÂÆöÊï∞„ÇíÂÆ£Ë®Ä„Åó„Åæ„Åô„ÄÇ
const TWITTER_HANDLE = 'HARUKI05758694';
const TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;

// SystemProgram„ÅØSolana„É©„É≥„Çø„Ç§„É†„Å∏„ÅÆÂèÇÁÖß„Åß„Åô„ÄÇ
const { SystemProgram, Keypair } = web3;
// GIF„Éá„Éº„Çø„Çí‰øùÊåÅ„Åô„Çã„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Ç≠„Éº„Éö„Ç¢„Çí‰ΩúÊàê„Åó„Åæ„Åô„ÄÇ
const arr = Object.values(KP._keypair.secretKey);
const secret = new Uint8Array(arr);
// ÁßòÂØÜÈçµ„Åã„ÇâbaseaccountÊÉÖÂ†±„ÇíÂèñÂæó
const baseAccount = web3.Keypair.fromSecretKey(secret);
// IDL„Éï„Ç°„Ç§„É´„Åã„Çâ„Éó„É≠„Ç∞„É©„É†ID„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ
const programID = new PublicKey(Idl.metadata.address);
// „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„ÇíDevnet„Å´Ë®≠ÂÆö„Åó„Åæ„Åô„ÄÇ
const network = clusterApiUrl(process.env.SOLANA_NETWORK);
// „Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥„ÅåÂÆå‰∫Ü„Åó„Åü„Å®„Åç„Å´ÈÄöÁü•ÊñπÊ≥ï„ÇíÂà∂Âæ°„Åó„Åæ„Åô„ÄÇ
const opts = {
  preflightCommitment: "processed"
}

/**
 * App„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 */
const App = () => {
  // „Çπ„ÉÜ„Éº„ÉàÂ§âÊï∞
  const [walletAddress, setWalletAddress] = useState(null);
  const [inputValue, setInputValue] = useState('');
  const [gifList, setGifList] = useState([]);
  
  /**
   * „Ç¶„Ç©„É¨„ÉÉ„ÉàÊé•Á∂öÁä∂ÊÖã„ÇíÁ¢∫Ë™ç„Åô„Çã„Åü„ÇÅ„ÅÆ„É°„ÇΩ„ÉÉ„Éâ
   */
  const checkIfWalletIsConnected = async () => {
    try {
      // Phatom Wallet„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÇíÂèñÂæó„Åô„Çã„ÄÇ
      const { solana } = window;

      if (solana) {
        if (solana.isPhantom) {
          console.log('Phantom wallet found!');
           /*
            * „Ç¶„Ç©„É¨„ÉÉ„Éà„Ç¢„ÇØ„Çª„ÇπË®±ÂèØ„ÅÆÁä∂Ê≥Å„ÇíÁ¢∫Ë™ç„Åô„Çã„ÄÇ
            */
          const response = await solana.connect({ onlyIfTrusted: true });
          console.log('Connected with Public Key:', response.publicKey.toString());
          // „Ç¶„Ç©„É¨„ÉÉ„Éà„ÅÆ„Ç¢„Éâ„É¨„Çπ„ÇíÊ†ºÁ¥ç„Åô„Çã„ÄÇ
          setWalletAddress(response.publicKey.toString());
        }
      } else {
        alert('Solana object not found! Get a Phantom Wallet üëª');
      }
    } catch (error) {
      console.error(error);
    }
  };

  /**
   * CONECCT WALLET„Éú„Çø„É≥„ÇíÊäº„Åó„ÅüÊôÇ„ÅÆÂá¶ÁêÜ
   */
  const connectWallet = async () => {
    const { solana } = window;

    if (solana) {
      // „Ç¶„Ç©„É¨„ÉÉ„Éà„Å´Êé•Á∂ö„Åô„Çã„ÄÇ
      const response = await solana.connect();
      console.log("Connected with Public Key:", response.publicKey.toString());
      // „Çπ„ÉÜ„Éº„ÉàÂ§âÊï∞„ÇíÊõ¥Êñ∞„Åô„Çã„ÄÇ
      setWalletAddress(response.publicKey.toString());
    }
  };

  /**
   *  renderNotConnectedContainer„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
   */
  const renderNotConnectedContainer = () => (
    <button
      className="cta-button connect-wallet-button"
      onClick={connectWallet}
    >
      Connect to Wallet
    </button>
  );

  /**
   * renderConnectedContainer„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
   */
  const renderConnectedContainer = () => {
    // „Ç¢„Ç´„Ç¶„É≥„Éà„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
    if (gifList === null) {
      return (
        <div className="connected-container">
          <button className="cta-button submit-gif-button" onClick={createGifAccount}>
            Do One-Time Initialization For GIF Program Account
          </button>
        </div>
      );
    } else {
      return (
        <div className="connected-container">
          <form
            onSubmit={(event) => {
              event.preventDefault();
              sendGif();
            }}
          >
            <input 
              type="text" 
              placeholder="Enter gif link!" 
              value={inputValue}
              onChange={onInputChange}
            />
            <button type="submit" className="cta-button submit-gif-button">
              Submit
            </button>
          </form>
          <div className="gif-grid">
            {gifList.map((item, index) => (
              <div className="gif-item" key={index}>
                <img src={item.gifLink}/>
              </div>
            ))}
          </div>
        </div>
      );
    }
  };

  /**
   * ÂÖ•Âäõ„Éï„Ç©„Éº„É†„ÅÆÂÄ§„ÅåÂ§âÂåñ„Åó„Åü„Å®„Åç„Å´Âëº„Å≥Âá∫„Åô„É°„ÇΩ„ÉÉ„Éâ
   */
  const onInputChange = (event) => {
    const { value } = event.target;
    setInputValue(value);
  };

  /**
   * GIF„ÅÆURL„Éá„Éº„Çø„ÇíSolana„ÉÅ„Çß„Éº„É≥„Å´ÈÄÅ‰ø°„Åô„Çã„Åü„ÇÅ„ÅÆ„É°„ÇΩ„ÉÉ„Éâ
   */
  const sendGif = async () => {
    if (inputValue.length === 0) {
      console.log("No gif link given!")
      return
    }
    setInputValue('');
    console.log('Gif link:', inputValue);

    try {
      // „Ç≥„É≥„Éà„É©„ÇØ„Éà„ÅÆÊ©üËÉΩ„Çí‰Ωø„ÅÜ„Åü„ÇÅ„ÅÆÊ∫ñÂÇô
      const provider = getProvider();
      const program = new Program(Idl, programID, provider);
      // addGif„É°„ÇΩ„ÉÉ„Éâ„ÇíÂëº„Å≥Âá∫„Åô
      await program.rpc.addGif(inputValue, {
        accounts: {
          baseAccount: baseAccount.publicKey,
          user: provider.wallet.publicKey,
        },
      });
      console.log("GIF successfully sent to program", inputValue)
      // GIF„Éá„Éº„Çø„ÇíÂèñÂæó„Åô„Çã„ÄÇ
      await getGifList();
    } catch (error) {
      console.log("Error sending GIF:", error)
    }
  };

  /**
   * „Éó„É≠„Éê„Ç§„ÉÄ„ÉºÊÉÖÂ†±„ÇíÂèñÂæó„Åô„Çã„Åü„ÇÅ„ÅÆ„É°„ÇΩ„ÉÉ„Éâ
   */
  const getProvider = () => {
    const connection = new Connection(network, opts.preflightCommitment);
    const provider = new Provider(
      connection, window.solana, opts.preflightCommitment,
    );
    return provider;
  }

  /**
   * GIF„ÇíÊ†ºÁ¥ç„Åô„Çã„Åü„ÇÅ„ÅÆ„Ç¢„Ç´„Ç¶„É≥„Éà„Çí‰ΩúÊàê„Åô„Çã„É°„ÇΩ„ÉÉ„Éâ
   */
  const createGifAccount = async () => {
    try {
      const provider = getProvider();
      const program = new Program(Idl, programID, provider);
      console.log("ping");
      // startStuffOff„É°„ÇΩ„ÉÉ„Éâ„ÅÆÂëº„Å≥Âá∫„Åó
      await program.rpc.startStuffOff({
        accounts: {
          baseAccount: baseAccount.publicKey,
          user: provider.wallet.publicKey,
          systemProgram: SystemProgram.programId,
        },
        signers: [baseAccount]
      });
      console.log("Created a new BaseAccount w/ address:", baseAccount.publicKey.toString());
      // GIF„ÅÆ„É™„Çπ„ÉàÂëº„Å≥Âá∫„Åó
      await getGifList();
    } catch(error) {
      console.log("Error creating BaseAccount account:", error)
    }
  }

  /**
   * GIF„ÅÆÊÉÖÂ†±„ÇíÂèñÂæó„Åô„Çã„Åü„ÇÅ„ÅÆ„É°„ÇΩ„ÉÉ„Éâ
   */
  const getGifList = async() => {
    try {
      // „Éó„É≠„Éê„Ç§„ÉÄ„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
      const provider = getProvider();
      const program = new Program(Idl, programID, provider);
      // „Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÂèñÂæó„Åô„Çã„ÄÇ
      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);
  
      console.log("Got the account", account)
      setGifList(account.gifList)
  
    } catch (error) {
      console.log("Error in getGifList: ", error)
      setGifList(null);
    }
  }

  // ÂâØ‰ΩúÁî®„Éï„ÉÉ„ÇØ
  useEffect(() => {
    const onLoad = async () => {
      await checkIfWalletIsConnected();
    };
    window.addEventListener('load', onLoad);
    return () => window.removeEventListener('load', onLoad);
  }, []);

  useEffect(() => {
    if (walletAddress) {
      console.log('Fetching GIF list...');
      getGifList();
    }
  }, [walletAddress]);

  return (
    <div className="App">
      <div className="container">
        <div className="header-container">
          <p className="header">üñº My First Solana DApp</p>
          <p className="sub-text">
            my GIF collection ‚ú®
          </p>
          {!walletAddress && renderNotConnectedContainer()}
        </div>
        <main className="main">
          {walletAddress && renderConnectedContainer()}
        </main>
        <div className="footer-container">
          <img alt="Twitter Logo" className="twitter-logo" src={twitterLogo} />
          <a
            className="footer-text"
            href={TWITTER_LINK}
            target="_blank"
            rel="noreferrer"
          >{`built on @${TWITTER_HANDLE}`}</a>
        </div>
      </div>
    </div>
  );
};

export default App;