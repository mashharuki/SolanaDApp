{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["require","config","TWITTER_HANDLE","TWITTER_LINK","SystemProgram","web3","arr","Keypair","Object","values","KP","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","Idl","metadata","address","network","clusterApiUrl","process","SOLANA_NETWORK","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","onInputChange","event","value","target","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","connection","Connection","Provider","createGifAccount","startStuffOff","systemProgram","programId","signers","account","fetch","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41ae2e84.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, {useEffect, useState} from \"react\";\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport Idl from \"./idl/myepicproject.json\";\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport KP from \"./key/keypair.json\";\nrequire('dotenv').config();\n\n// 定数を宣言します。\nconst TWITTER_HANDLE = 'HARUKI05758694';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n// SystemProgramはSolanaランタイムへの参照です。\nconst { SystemProgram, Keypair } = web3;\n// GIFデータを保持するアカウントのキーペアを作成します。\nconst arr = Object.values(KP._keypair.secretKey);\nconst secret = new Uint8Array(arr);\n// 秘密鍵からbaseaccount情報を取得\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n// IDLファイルからプログラムIDを取得します。\nconst programID = new PublicKey(Idl.metadata.address);\n// ネットワークをDevnetに設定します。\nconst network = clusterApiUrl(process.env.SOLANA_NETWORK);\n// トランザクションが完了したときに通知方法を制御します。\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n/**\n * Appコンポーネント\n */\nconst App = () => {\n  // ステート変数\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n  \n  /**\n   * ウォレット接続状態を確認するためのメソッド\n   */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      // Phatom Walletオブジェクトを取得する。\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n           /*\n            * ウォレットアクセス許可の状況を確認する。\n            */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          // ウォレットのアドレスを格納する。\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  /**\n   * CONECCT WALLETボタンを押した時の処理\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      // ウォレットに接続する。\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      // ステート変数を更新する。\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  /**\n   *  renderNotConnectedContainerコンポーネント\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  /**\n   * renderConnectedContainerコンポーネント\n   */\n  const renderConnectedContainer = () => {\n    // アカウントが存在するか確認\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input \n              type=\"text\" \n              placeholder=\"Enter gif link!\" \n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink}/>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  /**\n   * 入力フォームの値が変化したときに呼び出すメソッド\n   */\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  /**\n   * GIFのURLデータをSolanaチェーンに送信するためのメソッド\n   */\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n\n    try {\n      // コントラクトの機能を使うための準備\n      const provider = getProvider();\n      const program = new Program(Idl, programID, provider);\n      // addGifメソッドを呼び出す\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n      // GIFデータを取得する。\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n  /**\n   * プロバイダー情報を取得するためのメソッド\n   */\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  /**\n   * GIFを格納するためのアカウントを作成するメソッド\n   */\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(Idl, programID, provider);\n      console.log(\"ping\");\n      // startStuffOffメソッドの呼び出し\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      // GIFのリスト呼び出し\n      await getGifList();\n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  /**\n   * GIFの情報を取得するためのメソッド\n   */\n  const getGifList = async() => {\n    try {\n      // プロバイダー情報を取得\n      const provider = getProvider();\n      const program = new Program(Idl, programID, provider);\n      // アカウントを取得する。\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n  \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n\n  // 副作用フック\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">🖼 My First Solana DApp</p>\n          <p className=\"sub-text\">\n            my GIF collection ✨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n        </div>\n        <main className=\"main\">\n          {walletAddress && renderConnectedContainer()}\n        </main>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}